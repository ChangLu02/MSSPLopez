df3 <- data3[0:12, c(1, 3:ncol(data3))]
df4 <- data4[0:12, c(1, 3:ncol(data4))]
df1
df1 <- df1 %>%
mutate(across(-Criteria, ~case_when(
. == "Y" ~ 1,
. == "N" ~ 0,
. == "N/A" ~ NA_real_,
TRUE ~ NA_real_
)))
df2 <- df2 %>%
mutate(across(-Criteria, ~case_when(
. == "Y" ~ 1,
. == "N" ~ 0,
. == "N/A" ~ NA_real_,
TRUE ~ NA_real_
)))
df3 <- df3 %>%
mutate(across(-Criteria, ~case_when(
. == "Y" ~ 1,
. == "N" ~ 0,
. == "N/A" ~ NA_real_,
TRUE ~ NA_real_
)))
df4 <- df4 %>%
mutate(across(-Criteria, ~case_when(
. == "Y" ~ 1,
. == "N" ~ 0,
. == "N/A" ~ NA_real_,
TRUE ~ NA_real_
)))
library(irr)
dfs <- list(df1, df2, df3, df4)
names(dfs) <- c("Rater1", "Rater2", "Rater3", "Rater4")
dfs
# Function to perform light kappa test for each question
for (q in 1:30) {
# Extract the column for each question across all raters
data_matrix <- sapply(dfs, function(df) df[, q])
# Remove rows with NA
valid_rows <- complete.cases(data_matrix)
data_matrix <- data_matrix[valid_rows, ]
if (nrow(data_matrix) > 0) {
# Perform kappa test
kappa_result <- kappa2(data_matrix, weight = "unweighted")
cat(sprintf("Light Kappa for Q%d: %f\n", q, kappa_result$value))
} else {
cat(sprintf("Light Kappa for Q%d: Not enough valid data\n", q))
}
}
# Function to perform light kappa test for each question
for (q in 2:31) {
# Extract the column for each question across all raters
data_matrix <- sapply(dfs, function(df) df[, q])
# Remove rows with NA
valid_rows <- complete.cases(data_matrix)
data_matrix <- data_matrix[valid_rows, ]
if (nrow(data_matrix) > 0) {
# Perform kappa test
kappa_result <- kappa2(data_matrix, weight = "unweighted")
cat(sprintf("Light Kappa for Q%d: %f\n", q, kappa_result$value))
} else {
cat(sprintf("Light Kappa for Q%d: Not enough valid data\n", q))
}
}
# Function to perform light kappa test for each criterion (1 to 12)
for (c in 1:12) {
# Extract the criterion row across all raters
data_matrix <- do.call(cbind, lapply(dfs, function(df) df[c, ]))
# Remove rows with NA (though here we use columns, adjust if needed)
valid_rows <- complete.cases(t(data_matrix))
data_matrix <- t(data_matrix[, valid_rows, drop = FALSE])
if (nrow(data_matrix) > 0) {
# Perform kappa test
kappa_result <- kappa2(data_matrix, weight = "unweighted")
cat(sprintf("Light Kappa for Criterion %d: %f\n", c, kappa_result$value))
} else {
cat(sprintf("Light Kappa for Criterion %d: Not enough valid data\n", c))
}
}
library(irr)
# Assuming dfs is your list of dataframes with names Rater1, Rater2, Rater3, Rater4
dfs <- list(df1, df2, df3, df4)
names(dfs) <- c("Rater1", "Rater2", "Rater3", "Rater4")
# Function to perform light kappa test for each question (Q2 to Q30, skipping Criteria)
for (q in 2:31) {
# Extract the column for each question across all raters
data_matrix <- do.call(cbind, lapply(dfs, function(df) df[, q]))
# Remove rows with NA
valid_rows <- complete.cases(data_matrix)
data_matrix <- data_matrix[valid_rows, , drop = FALSE]
if (nrow(data_matrix) > 0) {
# Perform kappa test
kappa_result <- kappa2(data_matrix, weight = "unweighted")
cat(sprintf("Light Kappa for Q%d: %f\n", q, kappa_result$value))
} else {
cat(sprintf("Light Kappa for Q%d: Not enough valid data\n", q))
}
}
library(irr)
# Assuming dfs is your list of dataframes with names Rater1, Rater2, Rater3, Rater4
dfs <- list(df1, df2, df3, df4)
names(dfs) <- c("Rater1", "Rater2", "Rater3", "Rater4")
# Function to perform light kappa test for each question (Q2 to Q30, skipping Criteria)
for (q in 2:31) {
# Extract the column for each question across all raters
data_matrix <- do.call(cbind, lapply(dfs, function(df) df[, q]))
# Remove rows with NA
valid_rows <- complete.cases(data_matrix)
data_matrix <- data_matrix[valid_rows, , drop = FALSE]
if (nrow(data_matrix) > 0) {
# Perform light kappa test for multiple raters
kappa_result <- kappam.light(data_matrix)
cat(sprintf("Light Kappa for Q%d: %f\n", q, kappa_result$value))
} else {
cat(sprintf("Light Kappa for Q%d: Not enough valid data\n", q))
}
}
library(irr)
# Assuming dfs is your list of dataframes with names Rater1, Rater2, Rater3, Rater4
dfs <- list(df1, df2, df3, df4)
names(dfs) <- c("Rater1", "Rater2", "Rater3", "Rater4")
# Function to perform light kappa test for each question (Q2 to Q30, skipping Criteria)
for (q in 2:31) {
# Extract the column for each question across all raters
data_matrix <- do.call(cbind, lapply(dfs, function(df) df[, q]))
# Remove rows with NA
valid_rows <- complete.cases(data_matrix)
data_matrix <- data_matrix[valid_rows, , drop = FALSE]
if (nrow(data_matrix) > 0) {
# Check for variability
if (length(unique(as.vector(data_matrix))) > 1) {
# Perform Fleiss' kappa test for multiple raters
kappa_result <- kappam.fleiss(data_matrix)
cat(sprintf("Fleiss' Kappa for Q%d: %f\n", q, kappa_result$value))
} else {
cat(sprintf("Fleiss' Kappa for Q%d: Not enough variability (all ratings identical)\n", q))
}
} else {
cat(sprintf("Fleiss' Kappa for Q%d: Not enough valid data\n", q))
}
}
# Function to perform light kappa test for each criterion (1 to 12)
for (c in 1:12) {
# Extract the criterion row across all raters
data_matrix <- do.call(cbind, lapply(dfs, function(df) df[c, ]))
# Remove rows with NA (adjusting for row-wise data)
valid_rows <- complete.cases(t(data_matrix))
data_matrix <- t(data_matrix[, valid_rows, drop = FALSE])
if (nrow(data_matrix) > 0) {
# Check for variability
if (length(unique(as.vector(data_matrix))) > 1) {
# Perform Fleiss' kappa test for multiple raters
kappa_result <- kappam.fleiss(data_matrix)
cat(sprintf("Fleiss' Kappa for Criterion %d: %f\n", c, kappa_result$value))
} else {
cat(sprintf("Fleiss' Kappa for Criterion %d: Not enough variability (all ratings identical)\n", c))
}
} else {
cat(sprintf("Fleiss' Kappa for Criterion %d: Not enough valid data\n", c))
}
}
library(irr)
# Assuming dfs is your list of dataframes with names Rater1, Rater2, Rater3, Rater4
dfs <- list(df1, df2, df3, df4)
names(dfs) <- c("Rater1", "Rater2", "Rater3", "Rater4")
# Function to perform light kappa test for each question (Q2 to Q30, skipping Criteria)
for (q in 2:31) {
# Extract the column for each question across all raters
data_matrix <- do.call(cbind, lapply(dfs, function(df) df[, q]))
# Remove rows with NA
valid_rows <- complete.cases(data_matrix)
data_matrix <- data_matrix[valid_rows, , drop = FALSE]
if (nrow(data_matrix) > 0) {
# Check for variability
if (length(unique(as.vector(data_matrix))) > 1) {
# Perform Fleiss' kappa test for multiple raters
kappa_result <- kappam.fleiss(data_matrix)
cat(sprintf("Fleiss' Kappa for Q%d: %f\n", q, kappa_result$value))
} else {
cat(sprintf("Fleiss' Kappa for Q%d: Not enough variability (all ratings identical)\n", q))
}
} else {
cat(sprintf("Fleiss' Kappa for Q%d: Not enough valid data\n", q))
}
}
# Function to perform light kappa test for each criterion (1 to 12)
for (c in 1:12) {
# Extract the criterion row across all raters
data_matrix <- do.call(cbind, lapply(dfs, function(df) df[c, ]))
# Remove rows with NA (adjusting for row-wise data)
valid_rows <- complete.cases(t(data_matrix))
data_matrix <- t(data_matrix[, valid_rows, drop = FALSE])
print(data_matrix)
if (nrow(data_matrix) > 0) {
# Check for variability
if (length(unique(as.vector(data_matrix))) > 1) {
# Perform Fleiss' kappa test for multiple raters
kappa_result <- kappam.fleiss(data_matrix)
cat(sprintf("Fleiss' Kappa for Criterion %d: %f\n", c, kappa_result$value))
} else {
cat(sprintf("Fleiss' Kappa for Criterion %d: Not enough variability (all ratings identical)\n", c))
}
} else {
cat(sprintf("Fleiss' Kappa for Criterion %d: Not enough valid data\n", c))
}
}
library(irr)
# Assuming dfs is your list of dataframes with names Rater1, Rater2, Rater3, Rater4
dfs <- list(df1, df2, df3, df4)
names(dfs) <- c("Rater1", "Rater2", "Rater3", "Rater4")
# Function to perform light kappa test for each question (Q2 to Q30, skipping Criteria)
for (q in 2:31) {
# Extract the column for each question across all raters
data_matrix <- do.call(cbind, lapply(dfs, function(df) df[, q]))
# Remove rows with NA
valid_rows <- complete.cases(data_matrix)
data_matrix <- data_matrix[valid_rows, , drop = FALSE]
print(data_matrix)
if (nrow(data_matrix) > 0) {
# Check for variability
if (length(unique(as.vector(data_matrix))) > 1) {
# Perform Fleiss' kappa test for multiple raters
kappa_result <- kappam.fleiss(data_matrix)
cat(sprintf("Fleiss' Kappa for Q%d: %f\n", q, kappa_result$value))
} else {
cat(sprintf("Fleiss' Kappa for Q%d: Not enough variability (all ratings identical)\n", q))
}
} else {
cat(sprintf("Fleiss' Kappa for Q%d: Not enough valid data\n", q))
}
}
# Function to perform light kappa test for each criterion (1 to 12)
for (c in 1:12) {
# Extract the criterion row across all raters
data_matrix <- do.call(cbind, lapply(dfs, function(df) df[c, ]))
# Remove rows with NA (adjusting for row-wise data)
valid_rows <- complete.cases(t(data_matrix))
data_matrix <- t(data_matrix[, valid_rows, drop = FALSE])
if (nrow(data_matrix) > 0) {
# Check for variability
if (length(unique(as.vector(data_matrix))) > 1) {
# Perform Fleiss' kappa test for multiple raters
kappa_result <- kappam.fleiss(data_matrix)
cat(sprintf("Fleiss' Kappa for Criterion %d: %f\n", c, kappa_result$value))
} else {
cat(sprintf("Fleiss' Kappa for Criterion %d: Not enough variability (all ratings identical)\n", c))
}
} else {
cat(sprintf("Fleiss' Kappa for Criterion %d: Not enough valid data\n", c))
}
}
library(irr)
# Assuming dfs is your list of dataframes with names Rater1, Rater2, Rater3, Rater4
dfs <- list(df1, df2, df3, df4)
names(dfs) <- c("Rater1", "Rater2", "Rater3", "Rater4")
# Function to perform light kappa test for each question (Q2 to Q30, skipping Criteria)
for (q in 2:31) {
# Extract the column for each question across all raters
data_matrix <- do.call(cbind, lapply(dfs, function(df) df[, q]))
# Remove rows with NA
valid_rows <- complete.cases(data_matrix)
data_matrix <- data_matrix[valid_rows, , drop = FALSE]
print(data_matrix)
if (nrow(data_matrix) > 0) {
# Check for variability
if (length(unique(as.vector(data_matrix))) > 1) {
# Perform Fleiss' kappa test for multiple raters
kappa_result <- kappam.fleiss(data_matrix)
cat(sprintf("Fleiss' Kappa for Q%d: %f\n", q, kappa_result$value))
} else {
cat(sprintf("Fleiss' Kappa for Q%d: Not enough variability (all ratings identical)\n", q))
}
} else {
cat(sprintf("Fleiss' Kappa for Q%d: Not enough valid data\n", q))
}
}
# Function to perform light kappa test for each criterion (1 to 12)
for (c in 1:12) {
# Extract the criterion row across all raters
data_matrix <- do.call(cbind, lapply(dfs, function(df) df[c, ]))
# Remove rows with NA (adjusting for row-wise data)
valid_rows <- complete.cases(t(data_matrix))
data_matrix <- t(data_matrix[, valid_rows, drop = FALSE])
if (nrow(data_matrix) > 0) {
# Check for variability
if (length(unique(as.vector(data_matrix))) > 1) {
# Perform Fleiss' kappa test for multiple raters
kappa_result <- kappam.fleiss(data_matrix)
cat(sprintf("Fleiss' Kappa for Criterion %d: %f\n", c, kappa_result$value))
} else {
cat(sprintf("Fleiss' Kappa for Criterion %d: Not enough variability (all ratings identical)\n", c))
}
} else {
cat(sprintf("Fleiss' Kappa for Criterion %d: Not enough valid data\n", c))
}
}
library(irr)
# Assuming dfs is your list of dataframes with names Rater1, Rater2, Rater3, Rater4
dfs <- list(df1, df2, df3, df4)
names(dfs) <- c("Rater1", "Rater2", "Rater3", "Rater4")
# Function to perform light kappa test for each question (Q2 to Q30, skipping Criteria)
for (q in 2:31) {
# Extract the column for each question across all raters
data_matrix <- do.call(cbind, lapply(dfs, function(df) df[, q]))
# Remove rows with NA
valid_rows <- complete.cases(data_matrix)
data_matrix <- data_matrix[valid_rows, , drop = FALSE]
print(data_matrix)
if (nrow(data_matrix) > 0) {
# Check for variability
if (length(unique(as.vector(data_matrix))) > 1) {
# Perform Fleiss' kappa test for multiple raters
kappa_result <- kappam.fleiss(data_matrix)
cat(sprintf("Fleiss' Kappa for Q%d: %f\n", q-1, kappa_result$value))
} else {
cat(sprintf("Fleiss' Kappa for Q%d: Not enough variability (all ratings identical)\n", q))
}
} else {
cat(sprintf("Fleiss' Kappa for Q%d: Not enough valid data\n", q))
}
}
# Function to perform light kappa test for each criterion (1 to 12)
for (c in 1:12) {
# Extract the criterion row across all raters
data_matrix <- do.call(cbind, lapply(dfs, function(df) df[c, ]))
# Remove rows with NA (adjusting for row-wise data)
valid_rows <- complete.cases(t(data_matrix))
data_matrix <- t(data_matrix[, valid_rows, drop = FALSE])
if (nrow(data_matrix) > 0) {
# Check for variability
if (length(unique(as.vector(data_matrix))) > 1) {
# Perform Fleiss' kappa test for multiple raters
kappa_result <- kappam.fleiss(data_matrix)
cat(sprintf("Fleiss' Kappa for Criterion %d: %f\n", c, kappa_result$value))
} else {
cat(sprintf("Fleiss' Kappa for Criterion %d: Not enough variability (all ratings identical)\n", c))
}
} else {
cat(sprintf("Fleiss' Kappa for Criterion %d: Not enough valid data\n", c))
}
}
library(irr)
# Assuming dfs is your list of dataframes with names Rater1, Rater2, Rater3, Rater4
dfs <- list(df1, df2, df3, df4)
names(dfs) <- c("Rater1", "Rater2", "Rater3", "Rater4")
# Function to perform light kappa test for each question (Q2 to Q30, skipping Criteria)
for (q in 2:31) {
# Extract the column for each question across all raters
data_matrix <- do.call(cbind, lapply(dfs, function(df) df[, q]))
# Remove rows with NA
valid_rows <- complete.cases(data_matrix)
data_matrix <- data_matrix[valid_rows, , drop = FALSE]
if (nrow(data_matrix) > 0) {
# Check for variability
if (length(unique(as.vector(data_matrix))) > 1) {
# Perform Fleiss' kappa test for multiple raters
kappa_result <- kappam.fleiss(data_matrix)
cat(sprintf("Fleiss' Kappa for Q%d: %f\n", q-1, kappa_result$value))
} else {
cat(sprintf("Fleiss' Kappa for Q%d: Not enough variability (all ratings identical)\n", q))
}
} else {
cat(sprintf("Fleiss' Kappa for Q%d: Not enough valid data\n", q))
}
}
# Function to perform light kappa test for each criterion (1 to 12)
for (c in 1:12) {
# Extract the criterion row across all raters
data_matrix <- do.call(cbind, lapply(dfs, function(df) df[c, ]))
# Remove rows with NA (adjusting for row-wise data)
valid_rows <- complete.cases(t(data_matrix))
data_matrix <- t(data_matrix[, valid_rows, drop = FALSE])
if (nrow(data_matrix) > 0) {
# Check for variability
if (length(unique(as.vector(data_matrix))) > 1) {
# Perform Fleiss' kappa test for multiple raters
kappa_result <- kappam.fleiss(data_matrix)
cat(sprintf("Fleiss' Kappa for Criterion %d: %f\n", c, kappa_result$value))
} else {
cat(sprintf("Fleiss' Kappa for Criterion %d: Not enough variability (all ratings identical)\n", c))
}
} else {
cat(sprintf("Fleiss' Kappa for Criterion %d: Not enough valid data\n", c))
}
}
library(irr)
# Assuming dfs is your list of dataframes with names Rater1, Rater2, Rater3, Rater4
dfs <- list(df1, df2, df3, df4)
names(dfs) <- c("Rater1", "Rater2", "Rater3", "Rater4")
# Function to perform light kappa test for each question (Q2 to Q30, skipping Criteria)
for (q in 2:31) {
# Extract the column for each question across all raters
data_matrix <- do.call(cbind, lapply(dfs, function(df) df[, q]))
# Remove rows with NA
valid_rows <- complete.cases(data_matrix)
data_matrix <- data_matrix[valid_rows, , drop = FALSE]
if (nrow(data_matrix) > 0) {
# Check for variability
if (length(unique(as.vector(data_matrix))) > 1) {
# Perform Fleiss' kappa test for multiple raters
kappa_result <- kappam.fleiss(data_matrix)
cat(sprintf("Fleiss' Kappa for Q%d: %f\n", q-1, kappa_result$value))
} else {
cat(sprintf("Fleiss' Kappa for Q%d: Not enough variability (all ratings identical)\n", q))
}
} else {
cat(sprintf("Fleiss' Kappa for Q%d: Not enough valid data\n", q))
}
}
# Function to perform light kappa test for each criterion (1 to 12)
for (c in 1:12) {
# Extract the criterion row across all raters
data_matrix <- do.call(cbind, lapply(dfs, function(df) df[c, ]))
# Remove rows with NA (adjusting for row-wise data)
valid_rows <- complete.cases(t(data_matrix))
print(valid_rows)
data_matrix <- t(data_matrix[, valid_rows, drop = FALSE])
if (nrow(data_matrix) > 0) {
# Check for variability
if (length(unique(as.vector(data_matrix))) > 1) {
# Perform Fleiss' kappa test for multiple raters
kappa_result <- kappam.fleiss(data_matrix)
cat(sprintf("Fleiss' Kappa for Criterion %d: %f\n", c, kappa_result$value))
} else {
cat(sprintf("Fleiss' Kappa for Criterion %d: Not enough variability (all ratings identical)\n", c))
}
} else {
cat(sprintf("Fleiss' Kappa for Criterion %d: Not enough valid data\n", c))
}
}
# Assuming dfs is your list of dataframes with names Rater1, Rater2, Rater3, Rater4
dfs <- list(df1, df2, df3, df4)
names(dfs) <- c("Rater1", "Rater2", "Rater3", "Rater4")
# First table: Criteria (1-12) x Raters (Rater1, Rater2, Rater3, Rater4)
criteria_data <- do.call(cbind, lapply(dfs, function(df) df$Criteria))
criteria_table <- data.frame(Criteria = 1:12, Rater1 = criteria_data[, 1],
Rater2 = criteria_data[, 2],
Rater3 = criteria_data[, 3],
Rater4 = criteria_data[, 4])
# Second table: Questions (Q1-Q30) x Raters (Rater1, Rater2, Rater3, Rater4)
questions_data <- do.call(cbind, lapply(dfs, function(df) df[, 2:31])) # Columns Q1 to Q30
question_names <- paste0("Question", 1:30)
questions_table <- data.frame(row.names = question_names)
for (i in 1:4) {
questions_table[paste0("Rater", i)] <- questions_data[, seq(i, 30*4, by=4)]
}
# Assuming dfs is your list of dataframes with names Rater1, Rater2, Rater3, Rater4
dfs <- list(df1, df2, df3, df4)
names(dfs) <- c("Rater1", "Rater2", "Rater3", "Rater4")
# First table: Criteria (1-12) x Raters (Rater1, Rater2, Rater3, Rater4)
criteria_data <- do.call(cbind, lapply(dfs, function(df) df$Criteria))
criteria_table <- data.frame(Criteria = 1:12, Rater1 = criteria_data[, 1],
Rater2 = criteria_data[, 2],
Rater3 = criteria_data[, 3],
Rater4 = criteria_data[, 4])
# Second table: Questions (Q1-Q30) x Raters (Rater1, Rater2, Rater3, Rater4)
questions_data <- do.call(cbind, lapply(dfs, function(df) df[, 2:31])) # Columns Q1 to Q30
question_names <- paste0("Question", 1:30)
questions_table <- data.frame(row.names = question_names)
for (i in 1:4) {
questions_table[[paste0("Rater", i)]] <- questions_data[, seq(i, 30, by=4)]
}
# 表二：每个 question 的评分者列
question_df <- do.call(rbind, lapply(seq_along(dfs), function(i) {
df <- dfs[[i]]
colMeans(df, na.rm = TRUE)
}))
# 表二：每个 question 的评分者列
criteria_df <- do.call(cbind, lapply(dfs, function(df) {
df_numeric <- df[, sapply(df, is.numeric)]
rowMeans(df_numeric, na.rm = TRUE)
}))
colnames(criteria_df) <- names(dfs)
rownames(criteria_df) <- paste0("Criteria", 1:nrow(dfs[[1]]))
criteria_df <- as.data.frame(criteria_df)
# 表二：每个 question 的评分者列
question_df <- do.call(rbind, lapply(seq_along(dfs), function(i) {
df <- dfs[[i]]
colMeans(df, na.rm = TRUE)
}))
# 表二：每个 question 的评分者列
criteria_df <- do.call(cbind, lapply(dfs, function(df) {
df_numeric <- df[, sapply(df, is.numeric)]
rowMeans(df_numeric, na.rm = TRUE)
}))
colnames(criteria_df) <- names(dfs)
rownames(criteria_df) <- paste0("Criteria", 1:nrow(dfs[[1]]))
criteria_df <- as.data.frame(criteria_df)
question_df <- do.call(rbind, lapply(dfs, function(df) {
df_numeric <- df[, sapply(df, is.numeric)]
colMeans(df_numeric, na.rm = TRUE)
}))
question_df <- as.data.frame(t(question_df))
colnames(question_df) <- names(dfs)
rownames(question_df) <- paste0("Q", 1:nrow(question_df))
head(criteria_df)
head(question_df)
criteria_df
question_df
library(irr)
# 假设每个 dfs[[i]] 是一个 12x30 的矩阵（criteria × question）
# 我们先把每个评分者的评分拉平成向量，然后拼成一个矩阵
# 将每个评分者的评分矩阵拉平成一列
rater_matrix <- do.call(cbind, lapply(dfs, function(df) {
as.vector(as.matrix(df[, sapply(df, is.numeric)]))
}))
# 每一列是一个评分者，每一行为同一个样本的不同评分者评分
# 做 Light's Kappa 测试
light.kappa <- kappam.fleiss(rater_matrix)
print(light.kappa)
rater_matrix
