# Verify changes
str(df_students)
library(readxl)
library(dplyr)
check_normality_by_group <- function(data, group_col, test_col) {
data %>%
group_by(!!sym(group_col)) %>%
summarise(
Shapiro_Statistic = shapiro.test(na.omit(!!sym(test_col)))$statistic,
P_Value = shapiro.test(na.omit(!!sym(test_col)))$p.value
) %>%
arrange(P_Value)  # Sort by p-value
}
# Check normality for Total Score by demographic group
normality_total_score <- list(
Sex = check_normality_by_group(df_students, "Sex", "Total Score"),
Race_Ethnicity = check_normality_by_group(df_students, "Race/Ethnicity", "Total Score"),
English_Proficiency = check_normality_by_group(df_students, "English Proficiency", "Total Score"),
Born_USA = check_normality_by_group(df_students, "Born USA", "Total Score"),
Home_Language = check_normality_by_group(df_students, "Home Language", "Total Score")
)
# Print results
print("Normality Test for Total Score by Group")
print(normality_total_score)
# function for normality check using the Shapiro-Wilk test
# if the result of p-value >0.05, the data is normal
check_normality_by_group <- function(data, group_col, test_col) {
data %>%
group_by(!!sym(group_col)) %>%
summarise(
Shapiro_Statistic = shapiro.test(na.omit(!!sym(test_col)))$statistic,
P_Value = shapiro.test(na.omit(!!sym(test_col)))$p.value
) %>%
arrange(P_Value)
}
# Check normality for Total Score by demographic group
normality_total_score <- list(
Sex = check_normality_by_group(df_students, "Sex", "Total Score"),
Race_Ethnicity = check_normality_by_group(df_students, "Race/Ethnicity", "Total Score"),
English_Proficiency = check_normality_by_group(df_students, "English Proficiency", "Total Score"),
Born_USA = check_normality_by_group(df_students, "Born USA", "Total Score"),
Home_Language = check_normality_by_group(df_students, "Home Language", "Total Score")
)
# Print results
print("Normality Test for Total Score by Group")
print(normality_total_score)
# Check normality for Total Score by demographic group
normality_total_score <- list(
Sex = check_normality_by_group(df_students, "Sex", "Total Score"),
Race_Ethnicity = check_normality_by_group(df_students, "Race/Ethnicity", "Total Score"),
English_Proficiency = check_normality_by_group(df_students, "English Proficiency", "Total Score"),
Born_USA = check_normality_by_group(df_students, "Born USA", "Total Score"),
Home_Language = check_normality_by_group(df_students, "Home Language", "Total Score"),
Quiz_Time = check_normality_by_group(df_students, "Quiz Time","Total Score"),
Accomodations = check_normality_by_group(df_students, "Accomodations","Total Score"),
Age_Arrive_USA = check_normality_by_group(df_students, "Age arrive USA","Total Score")
)
# Convert value fromat to numeric
df_students$`Total Score` <- as.numeric(df_students$`Total Score`)
df_students$`Quiz Time` <- as.numeric(df_students$`Quiz Time`)
df_students$Accomodations <- as.numeric(df_students$Accomodations)
df_students$Sex <- as.numeric(df_students$Sex)
df_students$`Race/Ethnicity` <- as.numeric(df_students$`Race/Ethnicity`)
df_students$`English Proficiency` <- as.numeric(df_students$`English Proficiency`)
df_students$`Born USA` <- as.numeric(df_students$`Born USA`)
df_students$`Home Language` <- as.numeric(df_students$`Home Language`)
df_students$`Age arrive USA`<- as.numeric(df_students$`Age arrive USA`)
# Convert Quiz Time from seconds to minutes
df_students$Quiz_Time_Minutes <- df_students$Quiz_Time / 60 # for later test
# Convert value fromat to numeric
df_students$`Total Score` <- as.numeric(df_students$`Total Score`)
df_students$`Quiz Time` <- as.numeric(df_students$`Quiz Time`)
df_students$Accomodations <- as.numeric(df_students$Accomodations)
df_students$Sex <- as.numeric(df_students$Sex)
df_students$`Race/Ethnicity` <- as.numeric(df_students$`Race/Ethnicity`)
df_students$`English Proficiency` <- as.numeric(df_students$`English Proficiency`)
df_students$`Born USA` <- as.numeric(df_students$`Born USA`)
df_students$`Home Language` <- as.numeric(df_students$`Home Language`)
df_students$`Age arrive USA`<- as.numeric(df_students$`Age arrive USA`)
# Convert Quiz Time from seconds to minutes
df_students$`Quiz Time Minutes` <- df_students$`Quiz Time` / 60 # for later test
# Verify changes
str(df_students)
# Check normality for Total Score by demographic group
normality_total_score <- list(
Sex = check_normality_by_group(df_students, "Sex", "Total Score"),
Race_Ethnicity = check_normality_by_group(df_students, "Race/Ethnicity", "Total Score"),
English_Proficiency = check_normality_by_group(df_students, "English Proficiency", "Total Score"),
Born_USA = check_normality_by_group(df_students, "Born USA", "Total Score"),
Home_Language = check_normality_by_group(df_students, "Home Language", "Total Score"),
Quiz_Time = check_normality_by_group(df_students, "Quiz Time Minute","Total Score"),
Accomodations = check_normality_by_group(df_students, "Accomodations","Total Score"),
Age_Arrive_USA = check_normality_by_group(df_students, "Age arrive USA","Total Score")
)
# Check normality for Total Score by demographic group
normality_total_score <- list(
Sex = check_normality_by_group(df_students, "Sex", "Total Score"),
Race_Ethnicity = check_normality_by_group(df_students, "Race/Ethnicity", "Total Score"),
English_Proficiency = check_normality_by_group(df_students, "English Proficiency", "Total Score"),
Born_USA = check_normality_by_group(df_students, "Born USA", "Total Score"),
Home_Language = check_normality_by_group(df_students, "Home Language", "Total Score"),
Quiz_Time = check_normality_by_group(df_students, "Quiz Time Minutes","Total Score"),
Accomodations = check_normality_by_group(df_students, "Accomodations","Total Score"),
Age_Arrive_USA = check_normality_by_group(df_students, "Age arrive USA","Total Score")
)
# Check normality for Total Score by demographic group
normality_total_score <- list(
Sex = check_normality_by_group(df_students, "Sex", "Total Score"),
Race_Ethnicity = check_normality_by_group(df_students, "Race/Ethnicity", "Total Score"),
English_Proficiency = check_normality_by_group(df_students, "English Proficiency", "Total Score"),
Born_USA = check_normality_by_group(df_students, "Born USA", "Total Score"),
Home_Language = check_normality_by_group(df_students, "Home Language", "Total Score"),
Accomodations = check_normality_by_group(df_students, "Accomodations","Total Score"),
Age_Arrive_USA = check_normality_by_group(df_students, "Age arrive USA","Total Score")
)
# Check normality for Total Score by demographic group
normality_total_score <- list(
Sex = check_normality_by_group(df_students, "Sex", "Total Score"),
Race_Ethnicity = check_normality_by_group(df_students, "Race/Ethnicity", "Total Score"),
English_Proficiency = check_normality_by_group(df_students, "English Proficiency", "Total Score"),
Born_USA = check_normality_by_group(df_students, "Born USA", "Total Score"),
Home_Language = check_normality_by_group(df_students, "Home Language", "Total Score"),
Age_Arrive_USA = check_normality_by_group(df_students, "Age arrive USA","Total Score")
)
# Check normality for Total Score by demographic group
normality_total_score <- list(
Sex = check_normality_by_group(df_students, "Sex", "Total Score"),
Race_Ethnicity = check_normality_by_group(df_students, "Race/Ethnicity", "Total Score"),
English_Proficiency = check_normality_by_group(df_students, "English Proficiency", "Total Score"),
Born_USA = check_normality_by_group(df_students, "Born USA", "Total Score"),
Home_Language = check_normality_by_group(df_students, "Home Language", "Total Score"),
)
# Check normality for Total Score by demographic group
normality_total_score <- list(
Sex = check_normality_by_group(df_students, "Sex", "Total Score"),
Race_Ethnicity = check_normality_by_group(df_students, "Race/Ethnicity", "Total Score"),
English_Proficiency = check_normality_by_group(df_students, "English Proficiency", "Total Score"),
Born_USA = check_normality_by_group(df_students, "Born USA", "Total Score"),
Home_Language = check_normality_by_group(df_students, "Home Language", "Total Score"),
)
# Check normality for Total Score by demographic group
normality_total_score <- list(
Sex = check_normality_by_group(df_students, "Sex", "Total Score"),
Race_Ethnicity = check_normality_by_group(df_students, "Race/Ethnicity", "Total Score"),
English_Proficiency = check_normality_by_group(df_students, "English Proficiency", "Total Score"),
Born_USA = check_normality_by_group(df_students, "Born USA", "Total Score"),
Home_Language = check_normality_by_group(df_students, "Home Language", "Total Score"),
)
# Print results
print("Normality Test for Total Score by Group")
print(normality_total_score)
# Check normality for Total Score by demographic group
normality_total_score <- list(
Sex = check_normality_by_group(df_students, "Sex", "Total Score"),
Race_Ethnicity = check_normality_by_group(df_students, "Race/Ethnicity", "Total Score"),
English_Proficiency = check_normality_by_group(df_students, "English Proficiency", "Total Score"),
Born_USA = check_normality_by_group(df_students, "Born USA", "Total Score"),
Home_Language = check_normality_by_group(df_students, "Home Language", "Total Score"),
Age_Arrive_USA = check_normality_by_group(df_students, "Age arrive USA","Total Score")
)
# Print results
print("Normality Test for Total Score by Group")
print(normality_total_score)
# Check normality for Total Score by demographic group
normality_total_score <- list(
Sex = check_normality_by_group(df_students, "Sex", "Total Score"),
Race_Ethnicity = check_normality_by_group(df_students, "Race/Ethnicity", "Total Score"),
English_Proficiency = check_normality_by_group(df_students, "English Proficiency", "Total Score"),
Born_USA = check_normality_by_group(df_students, "Born USA", "Total Score"),
Home_Language = check_normality_by_group(df_students, "Home Language", "Total Score")
)
# Print results
print("Normality Test for Total Score by Group")
print(normality_total_score)
check_ks_normality_by_group <- function(data, group_col, test_col) {
data %>%
group_by(!!sym(group_col)) %>%
summarise(
Sample_Size = n(),
KS_Statistic = ifelse(Sample_Size >= 3,
ks.test(na.omit(!!sym(test_col)), "pnorm",
mean = mean(na.omit(!!sym(test_col))),
sd = sd(na.omit(!!sym(test_col))))$statistic,
NA),
P_Value = ifelse(Sample_Size >= 3,
ks.test(na.omit(!!sym(test_col)), "pnorm",
mean = mean(na.omit(!!sym(test_col))),
sd = sd(na.omit(!!sym(test_col))))$p.value,
NA)
) %>%
arrange(P_Value)
}
# function using the Kolmogorov-Smirnov Test
check_ks_normality_by_group <- function(data, group_col, test_col) {
data %>%
group_by(!!sym(group_col)) %>%
summarise(
Sample_Size = n(),
KS_Statistic = ifelse(Sample_Size >= 3,
ks.test(na.omit(!!sym(test_col)), "pnorm",
mean = mean(na.omit(!!sym(test_col))),
sd = sd(na.omit(!!sym(test_col))))$statistic,
NA),
P_Value = ifelse(Sample_Size >= 3,
ks.test(na.omit(!!sym(test_col)), "pnorm",
mean = mean(na.omit(!!sym(test_col))),
sd = sd(na.omit(!!sym(test_col))))$p.value,
NA)
) %>%
arrange(P_Value)
}
# Apply the KS test to Quiz Time groups
ks_normality_quiz_time <- check_ks_normality_by_group(df_students, "Quiz_Time_Minutes", "Total_Score")
# Apply the KS test to Quiz Time groups
ks_normality_quiz_time <- check_ks_normality_by_group(df_students, "Quiz Time Minutes", "Total Score")
# Print results
print("Kolmogorov-Smirnov Normality Test for Total Score by Quiz Time Group")
print(ks_normality_quiz_time)
# Apply the KS test to Quiz Time groups
ks_normality_quiz_time <- check_ks_normality_by_group(df_students, "Accomodations", "Total Score")
# Print results
print("Kolmogorov-Smirnov Normality Test for Total Score by Quiz Time Group")
print(ks_normality_quiz_time)
# Print results
print("Normality Test for Total Score by Group")
print(normality_total_score)
# function using the Kolmogorov-Smirnov Test
check_ks_normality_by_group <- function(data, group_col, test_col) {
data %>%
group_by(!!sym(group_col)) %>%
summarise(
Sample_Size = n(),
KS_Statistic = ifelse(Sample_Size >= 3,
ks.test(na.omit(!!sym(test_col)), "pnorm",
mean = mean(na.omit(!!sym(test_col))),
sd = sd(na.omit(!!sym(test_col))))$statistic,
NA),
P_Value = ifelse(Sample_Size >= 3,
ks.test(na.omit(!!sym(test_col)), "pnorm",
mean = mean(na.omit(!!sym(test_col))),
sd = sd(na.omit(!!sym(test_col))))$p.value,
NA)
) %>%
arrange(P_Value)
}
# Apply the KS test to Quiz Time groups
ks_normality_quiz_time <- check_ks_normality_by_group(df_students, "Accomodations", "Total Score")
# Print results
print("Kolmogorov-Smirnov Normality Test for Total Score by Quiz Time Group")
print(ks_normality_quiz_time)
install.packages("nortest")
library(readxl)
library(dplyr)no
library(readxl)
library(dplyr)
library(nortest)
check_lilliefors_normality_by_group <- function(data, group_col, test_col) {
data %>%
group_by(!!sym(group_col)) %>%
summarise(
Sample_Size = n(),
Lilliefors_Statistic = ifelse(Sample_Size >= 3,
lillie.test(na.omit(!!sym(test_col)))$statistic,
NA),
P_Value = ifelse(Sample_Size >= 3,
lillie.test(na.omit(!!sym(test_col)))$p.value,
NA)
) %>%
arrange(P_Value)
}
lilliefors_normality_quiz_time <- check_lilliefors_normality_by_group(df_students, "Quiz Time Minutes", "Total Score")
# Print results
print("Lilliefors Normality Test for Total Score by Quiz Time Group")
print(lilliefors_normality_quiz_time)
lilliefors_normality_quiz_time <- check_lilliefors_normality_by_group(df_students, "Accomodations", "Total Score")
# Print results
print("Lilliefors Normality Test for Total Score by Quiz Time Group")
print(lilliefors_normality_quiz_time)
lilliefors_normality_accomodations <- check_lilliefors_normality_by_group(df_students, "Accomodations", "Total Score")
# Print results
print("Lilliefors Normality Test for Total Score by different Group")
print(lilliefors_normality_accomodations)
lilliefors_normality_accomodations <- check_lilliefors_normality_by_group(df_students, "Accomodations", "Total Score")
# Print results
print("Lilliefors Normality Test for Total Score by different Group")
print(lilliefors_normality_accomodations)
# Apply the KS test to different groups
ks_normality_accomodations <- check_ks_normality_by_group(df_students, "Accomodations", "Total Score")
print("Kolmogorov-Smirnov Normality Test for Total Score by Quiz Time Group")
print(ks_normality_accomodations)
lilliefors_normality_accomodations <- check_lilliefors_normality_by_group(df_students, "Accomodations", "Total Score")
ad_normality_quiz_time <- check_ad_normality_by_group(df_students, "Quiz_Time_Minutes", "Total_Score")
#  Function using Lilliefors Test
check_lilliefors_normality_by_group <- function(data, group_col, test_col) {
data %>%
group_by(!!sym(group_col)) %>%
summarise(
Sample_Size = n(),
Lilliefors_Statistic = ifelse(Sample_Size >= 3,
lillie.test(na.omit(!!sym(test_col)))$statistic,
NA),
P_Value = ifelse(Sample_Size >= 3,
lillie.test(na.omit(!!sym(test_col)))$p.value,
NA)
) %>%
arrange(P_Value)
}
lilliefors_normality_accomodations <- check_lilliefors_normality_by_group(df_students, "Accomodations", "Total Score")
ad_normality_quiz_time <- check_ad_normality_by_group(df_students, "Quiz_Time_Minutes", "Total_Score")
lilliefors_normality_accomodations <- check_lilliefors_normality_by_group(df_students, "Accomodations", "Total Score")
ad_normality_quiz_time <- check_ad_normality_by_group(df_students, "Quiz Time Minutes", "Total Score")
lilliefors_normality_accomodations <- check_lilliefors_normality_by_group(df_students, "Accomodations", "Total Score")
ad_normality_quiz_time <- check_lilliefors_normality_by_group(df_students, "Quiz Time Minutes", "Total Score")
print("Lilliefors Normality Test for Total Score by different Group")
print(lilliefors_normality_accomodations)
print(lilliefors_normality_quiz_time)
lilliefors_normality_accomodations <- check_lilliefors_normality_by_group(df_students, "Accomodations", "Total Score")
print("Lilliefors Normality Test for Total Score by different Group")
print(lilliefors_normality_accomodations)
lilliefors_normality_accomodations <- check_lilliefors_normality_by_group(df_students, "Accomodations", "Total Score")
lilliefors_normality_quiz_time <- check_lilliefors_normality_by_group(df_students, "Quiz Time Minutes", "Total Score")
print("Lilliefors Normality Test for Total Score by different Group")
print(lilliefors_normality_accomodations)
print(lilliefors_normality_quiz_time)
lilliefors_normality_accomodations <- check_lilliefors_normality_by_group(df_students, "Accomodations", "Total Score")
lilliefors_normality_quiz_time <- check_lilliefors_normality_by_group(df_students, "Quiz Time Minutes", "Total Score")
lilliefors_normality_Age_Arrive_USA <- check_lilliefors_normality_by_group(df_students, "Age arrive USA", "Total Score")
print("Lilliefors Normality Test for Total Score by different Group")
print(lilliefors_normality_accomodations)
print(lilliefors_normality_quiz_time)
print(lilliefors_normality_Age_Arrive_USA)
# Convert value fromat to numeric
df_students$`Total Score` <- as.numeric(df_students$`Total Score`)
df_students$`Quiz Time` <- as.numeric(df_students$`Quiz Time`)
df_students$Accomodations <- as.numeric(df_students$Accomodations)
df_students$Sex <- as.numeric(df_students$Sex)
df_students$`Race/Ethnicity` <- as.numeric(df_students$`Race/Ethnicity`)
df_students$`English Proficiency` <- as.numeric(df_students$`English Proficiency`)
df_students$`Born USA` <- as.numeric(df_students$`Born USA`)
df_students$`Home Language` <- as.numeric(df_students$`Home Language`)
df_students$`Age arrive USA`<- as.numeric(df_students$`Age arrive USA`)
# Convert Quiz Time from seconds to minutes
df_students$`Quiz Time Minutes` <- df_students$`Quiz Time` / 60 # for later test
# Create Quiz Time Bins
df_students$Quiz_Time_Group <- cut(df_students$`Quiz Time Minutes`,
breaks = c(0, 5, 10, 15, 20, Inf),
labels = c("0-5 min", "5-10 min", "10-15 min", "15-20 min", "20+ min"),
include.lowest = TRUE)
# Check new groups
table(df_students$Quiz_Time_Group)
# Verify changes
str(df_students)
# Convert value fromat to numeric
df_students$`Total Score` <- as.numeric(df_students$`Total Score`)
df_students$`Quiz Time` <- as.numeric(df_students$`Quiz Time`)
df_students$Accomodations <- as.numeric(df_students$Accomodations)
df_students$Sex <- as.numeric(df_students$Sex)
df_students$`Race/Ethnicity` <- as.numeric(df_students$`Race/Ethnicity`)
df_students$`English Proficiency` <- as.numeric(df_students$`English Proficiency`)
df_students$`Born USA` <- as.numeric(df_students$`Born USA`)
df_students$`Home Language` <- as.numeric(df_students$`Home Language`)
df_students$`Age arrive USA`<- as.numeric(df_students$`Age arrive USA`)
# Convert Quiz Time from seconds to minutes
df_students$`Quiz Time Minutes` <- df_students$`Quiz Time` / 60 # for later test
# Create Quiz Time Bins
df_students$`Quiz Time Group` <- cut(df_students$`Quiz Time Minutes`,
breaks = c(0, 5, 10, 15, 20, Inf),
labels = c("0-5 min", "5-10 min", "10-15 min", "15-20 min", "20+ min"),
include.lowest = TRUE)
# Check new groups
table(df_students$`Quiz Time Group`)
# Verify changes
str(df_students)
lilliefors_normality_accomodations <- check_lilliefors_normality_by_group(df_students, "Accomodations", "Total Score")
lilliefors_normality_quiz_time <- check_lilliefors_normality_by_group(df_students, "Quiz Time Group", "Total Score")
# Convert value fromat to numeric
df_students$`Total Score` <- as.numeric(df_students$`Total Score`)
df_students$`Quiz Time` <- as.numeric(df_students$`Quiz Time`)
df_students$Accomodations <- as.numeric(df_students$Accomodations)
df_students$Sex <- as.numeric(df_students$Sex)
df_students$`Race/Ethnicity` <- as.numeric(df_students$`Race/Ethnicity`)
df_students$`English Proficiency` <- as.numeric(df_students$`English Proficiency`)
df_students$`Born USA` <- as.numeric(df_students$`Born USA`)
df_students$`Home Language` <- as.numeric(df_students$`Home Language`)
df_students$`Age arrive USA`<- as.numeric(df_students$`Age arrive USA`)
# Convert Quiz Time from seconds to minutes
df_students$`Quiz Time Minutes` <- df_students$`Quiz Time` / 60 # for later test
# Create Quiz Time Bins
df_students$`Quiz Time Group` <- cut(df_students$`Quiz Time Minutes`,
breaks = c(0, 10, 20, Inf),
labels = c("0-10 min", "10-20 min", "20+ min"),
include.lowest = TRUE)
# Check new groups
table(df_students$`Quiz Time Group`)
# Verify changes
str(df_students)
lilliefors_normality_accomodations <- check_lilliefors_normality_by_group(df_students, "Accomodations", "Total Score")
lilliefors_normality_quiz_time <- check_lilliefors_normality_by_group(df_students, "Quiz Time Group", "Total Score")
lilliefors_normality_Age_Arrive_USA <- check_lilliefors_normality_by_group(df_students, "Age arrive USA", "Total Score")
print("Lilliefors Normality Test for Total Score by different Group")
print(lilliefors_normality_accomodations)
print(lilliefors_normality_quiz_time)
print(lilliefors_normality_Age_Arrive_USA)
# Combine item difficulty and point biserial correlation data
combined_IDPB <- left_join(item_difficulty, point_biserial, by = "Item")
library(readxl)
library(dplyr)
library(nortest)
df <- read_excel("MAMS and Dental Combined for Analysis.xlsx", sheet = "Sheet1")
head(df)
summary(df)
df_students <- df[2:32, ]
head(df_students)
# Define the new column names for the questions
question_names <- paste0("Q", 1:20)  # Generates Q1, Q2, ..., Q20
# Rename only the question columns
colnames(df_students)[2:21] <- question_names
head(df_students)
colnames(df_students)
# Convert value format to numeric
df_students$`Total Score` <- as.numeric(df_students$`Total Score`)
df_students$`Quiz Time` <- as.numeric(df_students$`Quiz Time`)
df_students$Accomodations <- as.numeric(df_students$Accomodations)
df_students$Sex <- as.numeric(df_students$Sex)
df_students$`Race/Ethnicity` <- as.numeric(df_students$`Race/Ethnicity`)
df_students$`English Proficiency` <- as.numeric(df_students$`English Proficiency`)
df_students$`Born USA` <- as.numeric(df_students$`Born USA`)
df_students$`Home Language` <- as.numeric(df_students$`Home Language`)
df_students$`Age arrive USA`<- as.numeric(df_students$`Age arrive USA`)
# Convert Quiz Time from seconds to minutes
df_students$`Quiz Time Minutes` <- df_students$`Quiz Time` / 60 # for later test
# Create Quiz Time Bins
df_students$`Quiz Time Group` <- cut(df_students$`Quiz Time Minutes`,
breaks = c(0, 10, 20, Inf),
labels = c("0-10 min", "10-20 min", "20+ min"),
include.lowest = TRUE)
# Check new groups
table(df_students$`Quiz Time Group`)
# Verify changes
str(df_students)
# function for normality check using the Shapiro-Wilk test
# if the result of p-value >0.05, the data is normal
check_normality_by_group <- function(data, group_col, test_col) {
data %>%
group_by(!!sym(group_col)) %>%
summarise(
Shapiro_Statistic = shapiro.test(na.omit(!!sym(test_col)))$statistic,
P_Value = shapiro.test(na.omit(!!sym(test_col)))$p.value
) %>%
arrange(P_Value)
}
# Check normality for Total Score by demographic group
normality_total_score <- list(
Sex = check_normality_by_group(df_students, "Sex", "Total Score"),
Race_Ethnicity = check_normality_by_group(df_students, "Race/Ethnicity", "Total Score"),
English_Proficiency = check_normality_by_group(df_students, "English Proficiency", "Total Score"),
Born_USA = check_normality_by_group(df_students, "Born USA", "Total Score"),
Home_Language = check_normality_by_group(df_students, "Home Language", "Total Score")
)
# Print results
print("Normality Test for Total Score by Group")
print(normality_total_score)
spearman_corr <- cor(combined_IDPB$Item_Difficulty,
combined_IDPB$Point_Biserial_Correlation,
method = "spearman", use = "complete.obs")
# Load necessary libraries
library(tidyverse)
library(psych)
library(ggplot2)
df <- readxl::read_xlsx("MAMS and Dental Combined for Analysis.xlsx")
# Compute item difficulty as the mean proportion of correct responses
item_difficulty <- df_students %>%
summarise(across(Q1:Q20, ~ mean(as.numeric(.), na.rm = TRUE))) %>%
pivot_longer(cols = everything(), names_to = "Item", values_to = "Item_Difficulty")
print(item_difficulty)
# Compute point biserial correlation for each question using Pearson correlation
point_biserial <- map_df(paste0("Q", 1:20), function(q) {
cor_value <- cor.test(as.numeric(df_students[[q]]), as.numeric(df_students$`Total Score`), method = "pearson")$estimate
tibble(Item = q, Point_Biserial_Correlation = cor_value)
})
print(point_biserial)
spearman_corr <- cor(combined_IDPB$Item_Difficulty,
combined_IDPB$Point_Biserial_Correlation,
method = "spearman", use = "complete.obs")
lilliefors_normality_accomodations <- check_lilliefors_normality_by_group(df_students, "Accomodations", "Total Score")
lilliefors_normality_quiz_time <- check_lilliefors_normality_by_group(df_students, "Quiz Time Group", "Total Score")
lilliefors_normality_Age_Arrive_USA <- check_lilliefors_normality_by_group(df_students, "Age arrive USA", "Total Score")
print("Lilliefors Normality Test for Total Score by different Group")
print(lilliefors_normality_accomodations)
print(lilliefors_normality_quiz_time)
print(lilliefors_normality_Age_Arrive_USA)
# Apply the KS test to different groups
ks_normality_accomodations <- check_ks_normality_by_group(df_students, "Accomodations", "Total Score")
print("Kolmogorov-Smirnov Normality Test for Total Score by Quiz Time Group")
print(ks_normality_accomodations)
# Print results
print("Normality Test for Total Score by Group")
print(normality_total_score)
install.packages("xfun")
# Load necessary libraries
library(tidyverse)
library(psych)
library(ggplot2)
df <- readxl::read_xlsx("MAMS and Dental Combined for Analysis.xlsx")
df_students <- df[2:32, ]
head(df_students)
# Define the new column names for the questions
question_names <- paste0("Q", 1:20)  # Generates Q1, Q2, ..., Q20
# Rename only the question columns
colnames(df_students)[2:21] <- question_names
head(df_students)
q()
